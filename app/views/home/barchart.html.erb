<%= link_to  "Next", home_scartter_path, class: "linkx" %>
<style>
      .legend {
            border-radius: 50%;
            text-overflow: ellipsis;
            white-space: pre;
            color: rgb(119, 119, 119) !important;
            font-family: "Segoe UI", helvetica, arial, sans-serif;
            font-size: 10px;
            padding-left: 1px;
            padding-right: 4px;
      }

      .linkx {
            font-size: 20px;
      }

      body {
           margin: 0;
            padding: 0;
            font-family: 'Segoe UI',helvetica,arial,sans-serif;
            color: #666;
            /*background-color: #eaeaea;*/
            font-size: 16px;
            height: 100%;
            width: 100%;
      }

      .axis path,
      .axis line {
            fill: none;
            shape-rendering: crispEdges;
      }

      .textbar {
            background: none repeat scroll 0 0 rgba(0, 0, 0, 0.8);
            fill-opacity: 0.7;
            position: absolute;
            line-height: 1;
            font: 12px  helvetica, arial, sans-serif;
            fill: rgb(119, 119, 119);
      }

      .x.axis path {
            display: none;
      }
      .axisLabel {
            text-anchor: end;
            fill: rgb(119, 119, 119);
            font-size: 15px;
      }
      /*svg {overflow-x: scroll; width: 200px;}*/

      .grid {
            stroke: lightgrey
      }
      .tick {
            opacity: 0.7;
            text-anchor: end;
            fill: rgb(119, 119, 119);
            font-size: 11px;

      }

      .grid path {
            stroke-width: 0;
      }

      svg text.label {
            fill: black;
            background: lightgrey;
            font: 15px;
            font-weight: 400;
            text-anchor: middle;
      }

      .toolTip {
            font-family: 'Segoe UI',helvetica,arial,sans-serif;
            position: absolute;
            width: auto;
            height: auto;
            background: none repeat scroll 0 0 rgba(0, 0, 0, 0.8);
            color: white;
            font: 12px;
            padding: 5px;
            display: none;
      }
      .toolTip .arrow { 
            border-top: 7px solid transparent;
            border-bottom: 7px solid transparent;
            border-right: 7px solid rgba(0, 0, 0, 0.8);
            position: absolute;
            left: -7px;
            top: 20%;
      }
</style>
<svg id="barchart"></svg>
<script>
function getTextWidth(text, fontSize, fontName) {
      c = document.createElement("canvas");
      ctx = c.getContext("2d");
      ctx.font = fontSize + ' ' + fontName;
      return ctx.measureText(text).width;
}

function DataSegregator(array, on) {
      var SegData;
      OrdinalPositionHolder = {
            valueOf: function () {
                  thisObject = this;
                  keys = Object.keys(thisObject);
                  keys.splice(keys.indexOf("valueOf"), 1);
                  keys.splice(keys.indexOf("keys"), 1);
                  return keys.length == 0 ? -1 : d3.max(keys, function (d) {
                        return thisObject[d]
                  })
            },
            keys: function () {
                  keys = Object.keys(thisObject);
                  keys.splice(keys.indexOf("valueOf"), 1);
                  keys.splice(keys.indexOf("keys"), 1);
                  return keys;
            }
      }
      array[0].map(function (d) {
            return d[on]
      }).forEach(function (b) {
            value = OrdinalPositionHolder.valueOf();
            OrdinalPositionHolder[b] = OrdinalPositionHolder > -1 ? ++value : 0;
      })

      SegData = OrdinalPositionHolder.keys().map(function () {
            return [];
      });

      array.forEach(function (d) {
            d.forEach(function (b) {
                  SegData[OrdinalPositionHolder[b[on]]].push(b);
            })
      });

      return SegData;
}
d3.json("/data1.json", function (error, Data) {
      if (error) throw error;

      // Config View SVG
      var margin = {
                  top: 20,
                  right: 30,
                  bottom: 60,
                  left: 50
            },
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

      var textWidthHolder = 0;

      // Extension method declaration
      var x0 = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1);
      var x1 = d3.scale.ordinal();

      var y = d3.scale.linear()
            .range([height, 0]);
      var color = d3.scale.ordinal()
            .range(["#01b8aa", "#374649", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

      var line = d3.svg.line()
            .x(function (d) {
                  d.posX = x0(d.Date) + x0.rangeBand() / 2;
                  return x0(d.Date) + x0.rangeBand() / 2;
            })
            .y(function (d) {
                  d.posY = y(d.Value);
                  return y(d.Value)
            })


      function make_y_axis() {
            return d3.svg.axis()
                  .scale(y)
                  .orient("left")
                  .ticks(10)
      }

      function make_x_axis() {
            return d3.svg.axis()
                  .scale(x)
                  .orient("left")
                  .ticks(10)
      }

      function getIndex(arr, currX) {
            var index = -1;
            arr.forEach(function (item) {
                  if (item.posX <= currX) {
                        index++;
                  }
            });
            return index;
      }
      var xAxis = d3.svg.axis()
            .scale(x0)
            .orient("bottom");

      var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .tickFormat(d3.format(".2s"));

      var svg = d3.select("#barchart")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      /// Adding Date in LineCategory
      Data.forEach(function (d) {
            d.LineCategory.forEach(function (b) {
                  b.Date = d.Date;
            })
      });
      var Categories = new Array();

      // Bar Data categories
      Data.forEach(function (d) {
            d.Categories.forEach(function (b) {
                  b.Date = d.Date;
                  if (Categories.findIndex(function (c) {
                              return c.Name === b.Name
                        }) == -1) {
                        b.Type = "bar";
                        //console.log(JSON.stringify(b))
                        Categories.push(b)
                  }
            })
      });

      // Line Data categories
      Data.forEach(function (d) {
            d.LineCategory.forEach(function (b) {
                  if (Categories.findIndex(function (c) {
                              return c.Name === b.Name
                        }) == -1) {
                        b.Type = "line";
                        //console.log(JSON.stringify(b))
                        Categories.push(b)
                  }
            })
      });

      // Processing Line data
      lineData = DataSegregator(Data.map(function (d) {
            return d.LineCategory
      }), "Name");

      // Line Coloring
      LineColor = d3.scale.ordinal();

      LineColor.domain(Categories.filter(function (d) {
            return d.Type == "line"
      }).map(function (d) {
            return d.Name
      }));

      LineColor.range(["#fd625e", "#06bf00", "#98bdc5", "#671919", "#0b172b"])

      // Scale position X and Y in SVG

      x0.domain(Data.map(function (d) {
            return d.Date;
      }));

      x1.domain(Categories.filter(function (d) {
            return d.Type == "bar"
      }).map(function (d) {
            return d.Name
      })).rangeRoundBands([0, x0.rangeBand()]);

      y.domain([0, d3.max(Data, function (d) {
            return d3.max(d.Categories, function (d) {
                  return d.Value;
            });
      })]);

      // Tooltip

      var divTooltip = d3.select("body")
            .append("div")
            .attr("class", "toolTip");

      // Generate x axis

      svg.append("g")
            .data(Data)
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis)
            //Hover text x axis
            .on("mousemove", function (d) {
                  divTooltip.style("left", d3.event.pageX + 10 + "px");
                  divTooltip.style("top", d3.event.pageY - 25 + "px");
                  divTooltip.style("display", "inline-block");
                  divTooltip.html("<div>"+d.Date+"</div>");
            })
            .on("mouseout", function () {
                  divTooltip.style("display", "none");
            });

      svg.append("g")
            .attr("class", "grid")
            .call(make_y_axis()
                  .tickSize(-width, 0, 0)
                  .tickFormat("")
            )

      // Generate y axis

      svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
          .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", -45)
            .attr("x", -40)
            .attr("class", "axisLabel")
            .attr("dy", ".71em")
            .attr("dx", "-7em")
            .text("Population")
            .on("mousemove", function () {
                  divTooltip.style("left", d3.event.pageX + 10 + "px");
                  divTooltip.style("top", d3.event.pageY - 25 + "px");
                  divTooltip.style("display", "inline-block");
                  divTooltip.html("<div>"+ this.textContent +"</div>");
            })
            .on("mouseout", function () {
                  divTooltip.style("display", "none");
            });
            
      // Hover Text y axis
      svg.selectAll(".y.axis .tick text")
            .on("mousemove", function () {
                  divTooltip.style("left", d3.event.pageX + 10 + "px");
                  divTooltip.style("top", d3.event.pageY - 25 + "px");
                  divTooltip.style("display", "inline-block");
                  divTooltip.html("<div>" + this.textContent + "</div>");
            })
            .on("mouseout", function () {
                  divTooltip.style("display", "none");
            });

      // Start Draw Categories
      // Get Path Type Bar

      var state = svg.append("g")
            .attr("class", "bar")
            .selectAll(".state")
            .data(Data)
            .enter().append("g")
            .attr("class", "state")
            .attr("transform", function (d) {
                  return "translate(" + x0(d.Date) + ",0)";
            });

      // Draw Bar Categories

      state.selectAll("rect")
            .data(function (d) {
                  return d.Categories;
            })
            .enter()
            .append("rect")
            .attr("width", x1.rangeBand())
            .attr("x", function (d) {
                  return x1(d.Name);
            })
            .attr("y", function (d) {
                  return y(d.Value);
            })
            .on("mousemove", function (d) {
                  divTooltip.style("left", d3.event.pageX + 10 + "px");
                  divTooltip.style("top", d3.event.pageY - 20 + "px");
                  divTooltip.style("display", "inline-block");
                  divTooltip.html("<div class='arrow'></div><div>Date: " + d.Date + "</div><div>Name: " + d.Name + "</div><div>Value: " +
                        d.Value + "</div>");
            })
            .on("mouseout", function (d) {
                  divTooltip.style("display", "none");
            })
            .style("fill", function (d) {
                  return color(d.Name);
            })
            .transition()
            .delay(500)
            .attrTween("height", function (d) {
                  var i = d3
                        .interpolate(0, height - y(d.Value));
                  return function (t) {
                        return i(t);
                  }
            });

      // Draw label of text

      state.selectAll("text")
            .data(function (d) {
                  return d.Categories;
            })
            .enter()
            .append("rect")
            .attr("class", "labelTextbar")
            .style("fill", "white")
            .style("fill-opacity",0.7)
            .attr("rx",4)
            .attr("ry",4)
            .attr("x", function (d) {
                  return x1(d.Name) + x1.rangeBand() / 2 -20;
            })
            .attr("y",  function (d) {
                  return y(d.Value) -17;
            })
            .attr("width",43)
            .attr("height",15);

      // Draw text
      state.selectAll("text")
            .data(function (d) {
                  return d.Categories;
            })
            .enter()
            .append("text")
            .attr("class", "textbar")
            .attr("text-anchor", "middle")
            .attr("x", function (d) {
                  return x1(d.Name) + x1.rangeBand() / 2;
            })
            .attr("y", function (d) {
                  return y(d.Value) - 5;
            })
            .text(function (d) {
                  return d.Value;
            });

      // End Draw Categories

      // Start Draw lineCategories

      var lineDraw = svg.selectAll(".line")
            .data(lineData)
            .enter().append("g")
            .attr("class", "line")
            
      lineDraw.each(function (d) {
            Name = d[0].Name
            d3.select(this).append("path")
                  .attr("d", function (b) {
                        return line(b)
                  })
                  .style({
                        "stroke-width": "2px",
                        "fill": "none"
                  })
                  .style("stroke", LineColor(Name))
                  .on("mouseover", function (d) {
                        var mouseX = d3.mouse(this);
                        var index = getIndex(d, mouseX[0]);
                        var pos = index;
                        if ((d[index].posX + d[index + 1].posX) / 2 < mouseX[0]) {
                              pos += 1;
                        }
                        divTooltip.html("<div class='arrow'></div><div>" + d[pos].Date + "<br/>" + d[pos].Value + "</div>")
                        divTooltip.style("left", d3.event.pageX + 10 + "px");
                        divTooltip.style("top", d3.event.pageY - 15 + "px");
                        divTooltip.style("display", "inline-block");
                  })
                  .on("mouseout", function (d) {
                        divTooltip.style("display", "none");
                  })
                  .text(function (d) {
                        return 1000;
                  })
                  .transition().duration(1500);
            for(var i=0;i < d.length;i++) {  
                  d3.select(".line")
                        .append("rect")
                        .style("fill", "white")
                        .style("fill-opacity",0.7)
                        .attr("rx",4)
                        .attr("ry",4)
                        .attr("x", d[i].posX-20)
                        .attr("y",  d[i].posY +8)
                        .attr("width",43)
                        .attr("height",15);
                  d3.select(".line")
                        .append("text")
                        .attr("class", "textbar")
                        .attr("text-anchor", "middle")
                        .attr("x", d[i].posX)
                        .attr("y",  d[i].posY +20)
                        .text(d[i].Value);
                  
            }
      })
      .style("shape-rendering", "geometricPrecision");

      // End Draw lineCategories

      // Start Draw Legends

      var LegendHolder = svg.append("g").attr("class", "legendHolder");
      LegendHolder.selectAll(".legend")
            .data(Categories.map(function (d) {
                  return {
                        "Name": d.Name,
                        "Type": d.Type
                  }
            }))
            .enter().append("g")
            .attr("class", "legend")            
            .attr("transform", function (d, i) {
                  return "translate(0," + (-20) + ")";
            })
            .on("mousemove", function (d) {
                  divTooltip.style("left", d3.event.pageX + 10 + "px");
                  divTooltip.style("top", d3.event.pageY - 25 + "px");
                  divTooltip.style("display", "inline-block");
                  divTooltip.html("<div>" + d.Name + "</div>");
            })
            .on("mouseout", function (d) {
                  divTooltip.style("display", "none");
            })
            .each(function (d, i) {
                  //  Legend Symbols
                  d3.select(this).append("circle")
                        .attr("width", function () {
                              return 18
                        })
                        .attr("cx", function (b) {
                              left = (i + 1) * 15 + i * 18 + i * 55 + 10;
                              if (i == 1)
                                    left -= 10;
                              if (i == 2)
                                    left -= 16;
                              return left;
                        })
                        .attr("cy", 9)
                        .attr("r", 7)
                        .style("fill", function (b) {
                              return b.Type == 'bar' ? color(d.Name) : LineColor(d.Name)
                        });
                  //  Legend Text
                  d3.select(this).append("text")
                        .attr("x", function (b) {

                              left = (i + 1) * 15 + (i + 1) * 18 + (i + 1) * 5 +
                                    textWidthHolder;

                              return left;
                        })
                        .attr("y", 9)
                        .attr("dy", ".35em")
                        .style("color","rgb(102, 102, 102)")
                        .text(d.Name);
                  textWidthHolder += getTextWidth(d.Name, "10px", "calibri");
            });

      // Legend Placing

      d3.select(".legendHolder").attr("transform", function (d) {
            thisWidth = d3.select(this).node().getBBox().width;
            return "translate(" + ((width) / 2 - thisWidth / 2) + ",0)";
      })
      
      // End Draw Legend
});
</script>